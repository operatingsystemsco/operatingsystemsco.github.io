<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<!-- Copyright 1997 The Open Group, All Rights Reserved -->
<title>aio_write</title>
</head><body bgcolor=white>
<center>
<font size=2>
The Single UNIX &reg; Specification, Version 2<br>
Copyright &copy; 1997 The Open Group

</font></center><hr size=2 noshade>
<h4><a name = "tag_000_001_158">&nbsp;</a>NAME</h4><blockquote>
aio_write - asynchronous write to a file
(<b>REALTIME</b>)
</blockquote><h4><a name = "tag_000_001_159">&nbsp;</a>SYNOPSIS</h4><blockquote>
<pre><code>

#include &lt;<a href="aioh7.htm">aio.h</a>&gt;

int aio_write(struct aiocb *<i>aiocbp</i>);
</code>
</pre>
</blockquote><h4><a name = "tag_000_001_160">&nbsp;</a>DESCRIPTION</h4><blockquote>
The
<i>aio_write()</i>
function allows the calling process to write
<i>aiocbp-&gt;aio_nbytes</i>
to the file associated with
<i>aiocbp-&gt;aio_fildes</i>
from the buffer pointed to by
<i>aiocbp-&gt;aio_buf</i>.
The function call returns
when the write request has been initiated or, at a minimum,
queued to the file or device.
If _POSIX_PRIORITIZED_IO is defined
and prioritized I/O is supported for this file,
then the asynchronous operation is submitted at a priority equal to
the scheduling priority of the process minus
<i>aiocbp-&gt;aio_reqprio</i>.
The
<i>aiocbp</i>
may be used as an argument to
<i><a href="aioer9.htm">aio_error()</a></i>
and
<i><a href="aiore12.htm">aio_return()</a></i>
in order to determine the
error status and return status, respectively, of the asynchronous operation
while it is proceeding.
<p>
The
<i>aiocbp</i>
argument points to an
<b>aiocb</b>
structure.
If the buffer pointed to by
<i>aiocbp-&gt;aio_buf</i>
or the control block pointed to by
<i>aiocbp</i>
becomes an illegal address prior to asynchronous I/O completion,
then the behaviour is undefined.
<p>
If O_APPEND is not set for the file descriptor
<i>aio_fildes</i>,
then the requested operation takes place at the absolute position in
the file as given by
<i>aio_offset</i>,
as if
<i><a href="lseek.htm">lseek()</a></i>
were called immediately prior to the operation with an
<i>offset</i>
equal to
<i>aio_offset</i>
and a
<i>whence</i>
equal to SEEK_SET.
If O_APPEND
is set for the file descriptor, write operations append to the file
in the same order as the calls were made.
After a successful call to enqueue an asynchronous I/O operation,
the value of the file offset for the file is unspecified.
<p>
The
<i>aiocbp-&gt;aio_lio_opcode</i>
field is ignored by
<i>aio_write()</i>.
<p>
Simultaneous asynchronous operations using the same
<i>aiocbp</i>
produce undefined results.
<p>
If _POSIX_SYNCHRONIZED_IO is defined
and synchronised I/O is enabled on the file associated with
<i>aiocbp-&gt;aio_fildes</i>,
the behaviour of this function shall be according to the definitions of
synchronised I/O data integrity completion
and
synchronised I/O file integrity completion.
<p>
For any system action that changes the process memory space
while an asynchronous I/O is outstanding to the address range being changed,
the result of that action is undefined.
<p>
For regular files, no data transfer will occur past the offset maximum
established in the open file description associated with
<i>aiocbp-&gt;aio_fildes</i>.
</blockquote><h4><a name = "tag_000_001_161">&nbsp;</a>RETURN VALUE</h4><blockquote>
The
<i>aio_write()</i>
function returns the value zero to the
calling process if the I/O operation is successfully queued;
otherwise, the function returns the value -1 and sets
<i>errno</i>
to indicate the error.
</blockquote><h4><a name = "tag_000_001_162">&nbsp;</a>ERRORS</h4><blockquote>
The 
<i>aio_write()</i>
function will fail if:
<dl compact>

<dt>[EAGAIN]<dd>
The requested asynchronous I/O operation was not queued
due to system resource limitations.

<dt>[ENOSYS]<dd>
The
<i>aio_write()</i>
function is not supported by this implementation.

</dl>
<p>
Each of the following conditions may be detected synchronously
at the time of the call to
<i>aio_write()</i>,
or asynchronously.
If any of the conditions below are detected synchronously, the
<i>aio_write()</i>
function returns -1 and sets
<i>errno</i>
to the corresponding value.
If any of the conditions below are detected asynchronously,
the return status of the asynchronous operation is set to -1,
and the error status of the asynchronous operation will be
set to the corresponding value.
<dl compact>

<dt>[EBADF]<dd>
The
<i>aiocbp-&gt;aio_fildes</i>
argument is not a valid file descriptor open for writing.

<dt>[EINVAL]<dd>
The file offset value implied by
<i>aiocbp-&gt;aio_offset</i>
would be invalid,
<i>aiocbp-&gt;aio_reqprio</i>
is not a valid value, or
<i>aiocbp-&gt;aio_nbytes</i>
is an invalid value.

</dl>
<p>
In the case that the
<i>aio_write()</i>
successfully queues the I/O operation,
the return status of the asynchronous operation
will be one of the values normally returned by the
<i><a href="write.htm">write()</a></i>
function call.
If the operation is successfully queued
but is subsequently canceled or encounters an error,
the error status for the asynchronous operation
contains one of the values normally set by the
<i><a href="write.htm">write()</a></i>
function call, or one of the following:
<dl compact>

<dt>[EBADF]<dd>
The
<i>aiocbp-&gt;aio_fildes</i>
argument is not a valid file descriptor open for writing.

<dt>[EINVAL]<dd>
The file offset value implied by
<i>aiocbp-&gt;aio_offset</i>
would be invalid.

<dt>[ECANCELED]<dd>
The requested I/O was canceled before the I/O completed due to an explicit
<i><a href="aioca8.htm">aio_cancel()</a></i>
request.

</dl>
<p>
The following condition may be detected synchronously or asynchronously:
<dl compact>

<dt>[EFBIG]<dd>
The file is a regular file, 
<i>aiobcp-&gt;aio_nbytes</i>
is greater than 0 and the starting offset in
<i>aiobcp-&gt;aio_offset</i>
is at or beyond the offset maximum in the
open file description associated with
<i>aiocbp-&gt;aio_fildes</i>.

</dl>
</blockquote><h4><a name = "tag_000_001_163">&nbsp;</a>EXAMPLES</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_001_164">&nbsp;</a>APPLICATION USAGE</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_001_165">&nbsp;</a>FUTURE DIRECTIONS</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_001_166">&nbsp;</a>SEE ALSO</h4><blockquote>
<i><a href="aioca8.htm">aio_cancel()</a></i>,
<i><a href="aioer9.htm">aio_error()</a></i>,
<i><a href="aiore11.htm">aio_read()</a></i>,
<i><a href="aiore12.htm">aio_return()</a></i>,
<i><a href="lioli89.htm">lio_listio()</a></i>,
<i><a href="close.htm">close()</a></i>,
<i><a href="exit2.htm">_exit()</a></i>,
<i><a href="exec.htm">exec</a></i>,
<i><a href="fork.htm">fork()</a></i>,
<i><a href="lseek.htm">lseek()</a></i>,
<i><a href="write.htm">write()</a></i>.
</blockquote><h4>DERIVATION</h4><blockquote>
Derived from the POSIX Realtime Extension (1003.1b-1993/1003.1i-1995)  
</blockquote><hr size=2 noshade>
<center><font size=2>
UNIX &reg; is a registered Trademark of The Open Group.<br>
Copyright &copy; 1997 The Open Group
<br> [ <a href="../index.htm">Main Index</a> | <a href="../xshix.htm">XSH</a> | <a href="../xcuix.htm">XCU</a> | <a href="../xbdix.htm">XBD</a> | <a href="../cursesix.htm">XCURSES</a> | <a href="../xnsix.htm">XNS</a> ]

</font></center><hr size=2 noshade>
</body></html>

