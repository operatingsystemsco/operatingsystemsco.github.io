<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<!-- Copyright 1997 The Open Group, All Rights Reserved -->
<title>pthread_mutex_lock</title>
</head><body bgcolor=white>
<center>
<font size=2>
The Single UNIX &reg; Specification, Version 2<br>
Copyright &copy; 1997 The Open Group

</font></center><hr size=2 noshade>
<h4><a name = "tag_000_007_1468">&nbsp;</a>NAME</h4><blockquote>
pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock
- lock and unlock a mutex
</blockquote><h4><a name = "tag_000_007_1469">&nbsp;</a>SYNOPSIS</h4><blockquote>
<pre><code>

#include &lt;<a href="pthre114.htm">pthread.h</a>&gt;

int pthread_mutex_lock(pthread_mutex_t *<i>mutex</i>);
int pthread_mutex_trylock(pthread_mutex_t *<i>mutex</i>);
int pthread_mutex_unlock(pthread_mutex_t *<i>mutex</i>);
</code>
</pre>
</blockquote><h4><a name = "tag_000_007_1470">&nbsp;</a>DESCRIPTION</h4><blockquote>
The mutex object referenced by
<i>mutex</i>
is locked by calling
<i>pthread_mutex_lock()</i>.
If the mutex is already locked,
the calling thread blocks until the mutex becomes available.
This operation returns with the mutex object referenced by
<i>mutex</i>
in the locked state with the calling thread as its owner.
<p>
If the mutex type is PTHREAD_MUTEX_NORMAL, deadlock detection is not
provided. Attempting to
relock the mutex causes deadlock. If a thread attempts to unlock a
mutex that it has not locked or a mutex
which is unlocked, undefined behaviour results.
<p>
If the mutex type is PTHREAD_MUTEX_ERRORCHECK, then
error checking is provided.
If a thread attempts to relock a mutex that it has already
locked, an error will be returned. If a thread
attempts to unlock a mutex that it has not locked or a mutex which
is unlocked, an error will be returned.
<p>
If the mutex type is PTHREAD_MUTEX_RECURSIVE, then the mutex maintains
the concept of a lock count.
When a thread successfully acquires a mutex for the
first time, the lock count is set
to one. Every time a thread relocks this mutex, the lock count is
incremented by one. Each time the
thread unlocks the mutex, the lock count is decremented by one.
When the lock count reaches zero, the
mutex becomes available for other threads to acquire. If a thread
attempts to unlock a mutex that it has
not locked or a mutex which is unlocked, an error will be returned.
<p>
If the mutex type is PTHREAD_MUTEX_DEFAULT, attempting to recursively
lock the mutex results in
undefined behaviour. Attempting to unlock the mutex if it was not
locked by the calling thread results in
undefined behaviour. Attempting to unlock the mutex if it is not
locked results in undefined behaviour.
<p>
The function
<i>pthread_mutex_trylock()</i>
is identical to
<i>pthread_mutex_lock()</i>
except that if the mutex object referenced by
<i>mutex</i>
is currently locked (by any thread, including the
current thread), the call returns immediately.
<p>
The
<i>pthread_mutex_unlock()</i>
function releases the mutex object referenced by
<i>mutex</i>.
The manner in which a mutex is released is dependent upon the mutex's
type attribute.
If there are threads blocked on the mutex object referenced by
<i>mutex</i> when 
<i>pthread_mutex_unlock()</i>
is called, resulting in the mutex
becoming available, the scheduling policy is used to determine
which thread shall acquire the mutex. 
(In the case of PTHREAD_MUTEX_RECURSIVE mutexes, the mutex becomes
available when the count reaches zero and the calling thread no
longer has any locks on this mutex).
<p>
If a signal is delivered to a thread waiting for a mutex,
upon return from the signal handler the thread resumes waiting
for the mutex as if it was not interrupted.
</blockquote><h4><a name = "tag_000_007_1471">&nbsp;</a>RETURN VALUE</h4><blockquote>
If successful, the
<i>pthread_mutex_lock()</i>
and
<i>pthread_mutex_unlock()</i>
functions return zero.
Otherwise, an error number is returned to indicate the error.
<p>
The function
<i>pthread_mutex_trylock()</i>
returns zero if a lock on the mutex object referenced by
<i>mutex</i>
is acquired.
Otherwise, an error number is returned to indicate the error.
</blockquote><h4><a name = "tag_000_007_1472">&nbsp;</a>ERRORS</h4><blockquote>
The 
<i>pthread_mutex_lock()</i>
and
<i>pthread_mutex_trylock()</i>
functions will fail if:
<dl compact>

<dt>[EINVAL]<dd>
The
<i>mutex</i>
was created with the protocol attribute having the value
PTHREAD_PRIO_PROTECT
and the calling thread's priority is higher
than the mutex's current priority ceiling.

</dl>
<p>
The
<i>pthread_mutex_trylock()</i>
function will fail if:
<dl compact>

<dt>[EBUSY]<dd>
The
<i>mutex</i>
could not be acquired because it was already locked.

</dl>
<p>
The
<i>pthread_mutex_lock()</i>,
<i>pthread_mutex_trylock()</i>
and
<i>pthread_mutex_unlock()</i>
functions may fail if:
<dl compact>

<dt>[EINVAL]<dd>
The value specified by
<i>mutex</i>
does not refer to an initialised mutex object.

<dt>[EAGAIN]<dd>
The mutex could not be acquired because the maximum
number of recursive locks for <i>mutex</i> has been exceeded.

</dl>
<p>
The
<i>pthread_mutex_lock()</i>
function may fail if:
<dl compact>

<dt>[EDEADLK]<dd>
The current thread already owns the mutex.

</dl>
<p>
The
<i>pthread_mutex_unlock()</i>
function may fail if:
<dl compact>

<dt>[EPERM]<dd>
The current thread does not own the mutex.

</dl>
<p>
These functions will not return an error code of [EINTR].
</blockquote><h4><a name = "tag_000_007_1473">&nbsp;</a>EXAMPLES</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_007_1474">&nbsp;</a>APPLICATION USAGE</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_007_1475">&nbsp;</a>FUTURE DIRECTIONS</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_007_1476">&nbsp;</a>SEE ALSO</h4><blockquote>
<i><a href="pthre160.htm">pthread_mutex_init()</a></i>,
<i><a href="pthre158.htm">pthread_mutex_destroy()</a></i>,
<i><a href="pthre114.htm">&lt;pthread.h&gt;</a></i>.
</blockquote><h4>DERIVATION</h4><blockquote>
Derived from the POSIX Threads Extension (1003.1c-1995)
</blockquote><hr size=2 noshade>
<center><font size=2>
UNIX &reg; is a registered Trademark of The Open Group.<br>
Copyright &copy; 1997 The Open Group
<br> [ <a href="../index.htm">Main Index</a> | <a href="../xshix.htm">XSH</a> | <a href="../xcuix.htm">XCU</a> | <a href="../xbdix.htm">XBD</a> | <a href="../cursesix.htm">XCURSES</a> | <a href="../xnsix.htm">XNS</a> ]

</font></center><hr size=2 noshade>
</body></html>

