<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<!-- Copyright 1997 The Open Group, All Rights Reserved -->
<title>&lt;stdio.h&gt;</title>
</head><body bgcolor=white>
<center>
<font size=2>
The Single UNIX &reg; Specification, Version 2<br>
Copyright &copy; 1997 The Open Group

</font></center><hr size=2 noshade>
<h4><a name = "tag_000_008_871">&nbsp;</a>NAME</h4><blockquote>
stdio.h - standard buffered input/output
</blockquote><h4><a name = "tag_000_008_872">&nbsp;</a>SYNOPSIS</h4><blockquote>
<pre><code>

#include &lt;stdio.h&gt;
</code>
</pre>
</blockquote><h4><a name = "tag_000_008_873">&nbsp;</a>DESCRIPTION</h4><blockquote>
The
<i>&lt;stdio.h&gt;</i>
header defines the following macro names as positive
integral constant expressions:
<dl compact>

<dt>BUFSIZ<dd>
Size of
<i>&lt;stdio.h&gt;</i>
buffers.

<dt>FILENAME_MAX<dd>
Maximum size in bytes of the longest
filename string that the implementation
guarantees can be opened.

<dt>FOPEN_MAX<dd>
Number of streams which the implementation
guarantees can be open simultaneously.
The value will be at least eight.

<dt>_IOFBF<dd>
Input/output fully buffered.

<dt>_IOLBF<dd>
Input/output line buffered.

<dt>_IONBF<dd>
Input/output unbuffered.

<dt>L_ctermid<dd>
Maximum size of character
array to hold
<i>ctermid</i>()
output.

<dt>L_cuserid<dd>
Maximum size of character
array to hold
<i>cuserid</i>()
output. <b>(LEGACY)</b>

<dt>L_tmpnam<dd>
Maximum size of character
array to hold <i>tmpnam</i>() output.

<dt>SEEK_CUR<dd>
Seek relative to current position.

<dt>SEEK_END<dd>
Seek relative to end-of-file.

<dt>SEEK_SET<dd>
Seek relative to start-of-file.

<dt>TMP_MAX<dd>
Minimum number of unique filenames
generated by
<i>tmpnam</i>().
Maximum number of times an application can call
<i>tmpnam</i>()
reliably.
The value of TMP_MAX will be at least 10,000.

</dl>
<p>
The following macro name is defined as a
negative integral constant expression:
<dl compact>

<dt>EOF<dd>
End-of-file return value.

</dl>
<p>
The following macro name is defined as a
null pointer constant:
<dl compact>

<dt>NULL<dd>
Null pointer.

</dl>
<p>
The following macro name is defined as a
string constant:
<dl compact>

<dt>P_tmpdir<dd>
default directory prefix for
<i>tempnam</i>().

</dl>
<p>
The following macro names are defined as
expressions of type pointer to FILE:
<dl compact>

<dt>stderr<dd>
Standard error output stream.

<dt>stdin<dd>
Standard input stream.

<dt>stdout<dd>
Standard output stream.

</dl>
<p>
The following data types are defined through <b>typedef</b>:
<dl compact>

<dt><b>FILE</b><dd><index term="data type, FILE"></index>
A structure containing information about a file.

<dt><b>fpos_t</b><dd><index term="data type, fpos_t"></index>
Type containing all information needed to specify uniquely
every position within a file.

<dt><b>va_list</b><dd>As described in
<i><a href="stdar255.htm">&lt;stdarg.h&gt;</a></i>.

<dt><b>size_t</b><dd>As described in
<i><a href="stdde256.htm">&lt;stddef.h&gt;</a></i>.

</dl>
<p>
The following are declared as functions and may also be defined
as macros.
Function prototypes must be provided for use with an ISO C
compiler.
<pre>
<code>
void     <a href="clearerr.htm">clearerr</a>(FILE *);
char    *<a href="ctermid.htm">ctermid</a>(char *);
char    *<a href="cuserid.htm">cuserid</a>(char *);<b>(LEGACY)</b>
int      <a href="fclose.htm">fclose</a>(FILE *);
FILE    *<a href="fdopen.htm">fdopen</a>(int, const char *);
int      <a href="feof.htm">feof</a>(FILE *);
int      <a href="ferror.htm">ferror</a>(FILE *);
int      <a href="fflush.htm">fflush</a>(FILE *);
int      <a href="fgetc.htm">fgetc</a>(FILE *);
int      <a href="fgetpos.htm">fgetpos</a>(FILE *, fpos_t *);
char    *<a href="fgets.htm">fgets</a>(char *, int, FILE *);
int      <a href="fileno.htm">fileno</a>(FILE *);
void     <a href="flock46.htm">flockfile</a>(FILE *);
FILE    *<a href="fopen.htm">fopen</a>(const char *, const char *);
int      <a href="fprintf.htm">fprintf</a>(FILE *, const char *, ...);
int      <a href="fputc.htm">fputc</a>(int, FILE *);
int      <a href="fputs.htm">fputs</a>(const char *, FILE *);
size_t   <a href="fread.htm">fread</a>(void *, size_t, size_t, FILE *);
FILE    *<a href="freopen.htm">freopen</a>(const char *, const char *, FILE *);
int      <a href="fscanf.htm">fscanf</a>(FILE *, const char *, ...);
int      <a href="fseek.htm">fseek</a>(FILE *, long int, int);
int      <a href="fseeko.htm">fseeko</a>(FILE *, off_t, int);
int      <a href="fsetpos.htm">fsetpos</a>(FILE *, const fpos_t *);
long int <a href="ftell.htm">ftell</a>(FILE *);
off_t    <a href="ftello.htm">ftello</a>(FILE *);
int      <a href="ftryl51.htm">ftrylockfile</a>(FILE *);
void     <a href="funlo53.htm">funlockfile</a>(FILE *);
size_t   <a href="fwrite.htm">fwrite</a>(const void *, size_t, size_t, FILE *);
int      <a href="getc.htm">getc</a>(FILE *);
int      <a href="getchar.htm">getchar</a>(void);
int      <a href="getcu54.htm">getc_unlocked</a>(FILE *);
int      <a href="getch55.htm">getchar_unlocked</a>(void);
int      <a href="getopt.htm">getopt</a>(int, char * const[], const char); <b>(LEGACY)</b>
char    *<a href="gets.htm">gets</a>(char *);
int      <a href="getw.htm">getw</a>(FILE *);
int      <a href="pclose.htm">pclose</a>(FILE *);
void     <a href="perror.htm">perror</a>(const char *);
FILE    *<a href="popen.htm">popen</a>(const char *, const char *);
int      <a href="printf.htm">printf</a>(const char *, ...);
int      <a href="putc.htm">putc</a>(int, FILE *);
int      <a href="putchar.htm">putchar</a>(int);
int      <a href="putcu195.htm">putc_unlocked</a>(int, FILE *);
int      <a href="putch196.htm">putchar_unlocked</a>(int);
int      <a href="puts.htm">puts</a>(const char *);
int      <a href="putw.htm">putw</a>(int, FILE *);
int      <a href="remove.htm">remove</a>(const char *);
int      <a href="rename.htm">rename</a>(const char *, const char *);
void     <a href="rewind.htm">rewind</a>(FILE *);
int      <a href="scanf.htm">scanf</a>(const char *, ...);
void     <a href="setbuf.htm">setbuf</a>(FILE *, char *);
int      <a href="setvbuf.htm">setvbuf</a>(FILE *, char *, int, size_t);
int      <a href="snprintf.htm">snprintf</a>(char *, size_t, const char *, ...);
int      <a href="sprintf.htm">sprintf</a>(char *, const char *, ...);
int      <a href="sscanf.htm">sscanf</a>(const char *, const char *, int ...);
char    *<a href="tempnam.htm">tempnam</a>(const char *, const char *);
FILE    *<a href="tmpfile.htm">tmpfile</a>(void);
char    *<a href="tmpnam.htm">tmpnam</a>(char *);
int      <a href="ungetc.htm">ungetc</a>(int, FILE *);
int      <a href="vfprintf.htm">vfprintf</a>(FILE *, const char *, va_list);
int      <a href="vprintf.htm">vprintf</a>(const char *, va_list);
int      <a href="vsnpr307.htm">vsnprintf</a>(char *, size_t, const char *, va_list);
int      <a href="vsprintf.htm">vsprintf</a>(char *, const char *, va_list);
</code>
</pre>
<p>
The following external variables are defined:
<pre>
<code>
extern char  *optarg;    )
extern int    opterr;    )
extern int    optind;    ) <b>(LEGACY)</b>
extern int    optopt;    )
</code>
</pre>
<p>
Inclusion of the
<i>&lt;stdio.h&gt;</i>
header may also make visible all symbols from
<i><a href="stdde256.htm">&lt;stddef.h&gt;</a></i>.
</blockquote><h4><a name = "tag_000_008_874">&nbsp;</a>APPLICATION USAGE</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_008_875">&nbsp;</a>FUTURE DIRECTIONS</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_008_876">&nbsp;</a>SEE ALSO</h4><blockquote>
<i><a href="clearerr.htm">clearerr()</a></i>,
<i><a href="ctermid.htm">ctermid()</a></i>,
<i><a href="cuserid.htm">cuserid()</a></i>,
<i><a href="fclose.htm">fclose()</a></i>,
<i><a href="fdopen.htm">fdopen()</a></i>,
<i><a href="fgetc.htm">fgetc()</a></i>,
<i><a href="fgetpos.htm">fgetpos()</a></i>,
<i><a href="ferror.htm">ferror()</a></i>,
<i><a href="feof.htm">feof()</a></i>,
<i><a href="fflush.htm">fflush()</a></i>,
<i><a href="fgets.htm">fgets()</a></i>,
<i><a href="fileno.htm">fileno()</a></i>,
<i><a href="fopen.htm">fopen()</a></i>,
<i><a href="fputc.htm">fputc()</a></i>,
<i><a href="fputs.htm">fputs()</a></i>,
<i><a href="fread.htm">fread()</a></i>,
<i><a href="freopen.htm">freopen()</a></i>,
<i><a href="fseek.htm">fseek()</a></i>,
<i><a href="fsetpos.htm">fsetpos()</a></i>,
<i><a href="ftell.htm">ftell()</a></i>,
<i><a href="fwrite.htm">fwrite()</a></i>,
<i><a href="getc.htm">getc()</a></i>,
<i><a href="getcu54.htm">getc_unlocked()</a></i>,
<i><a href="getwchar.htm">getwchar()</a></i>,
<i><a href="getchar.htm">getchar()</a></i>,
<i><a href="getopt.htm">getopt()</a></i>,
<i><a href="gets.htm">gets()</a></i>,
<i><a href="pclose.htm">pclose()</a></i>,
<i><a href="perror.htm">perror()</a></i>,
<i><a href="popen.htm">popen()</a></i>,
<i><a href="printf.htm">printf()</a></i>,
<i><a href="putc.htm">putc()</a></i>,
<i><a href="putchar.htm">putchar()</a></i>,
<i><a href="puts.htm">puts()</a></i>,
<i><a href="putwchar.htm">putwchar()</a></i>,
<i><a href="remove.htm">remove()</a></i>,
<i><a href="rename.htm">rename()</a></i>,
<i><a href="rewind.htm">rewind()</a></i>,
<i><a href="scanf.htm">scanf()</a></i>,
<i><a href="setbuf.htm">setbuf()</a></i>,
<i><a href="setvbuf.htm">setvbuf()</a></i>,
<i><a href="sscanf.htm">sscanf()</a></i>,
<i><a href="stdin.htm">stdin</a></i>,
<i><a href="system.htm">system()</a></i>,
<i><a href="tempnam.htm">tempnam()</a></i>,
<i><a href="tmpfile.htm">tmpfile()</a></i>,
<i><a href="tmpnam.htm">tmpnam()</a></i>,
<i><a href="ungetc.htm">ungetc()</a></i>,
<i><a href="vprintf.htm">vprintf()</a></i>,
<i><a href="systy278.htm">&lt;sys/types.h&gt;</a></i>.
</blockquote><hr size=2 noshade>
<center><font size=2>
UNIX &reg; is a registered Trademark of The Open Group.<br>
Copyright &copy; 1997 The Open Group
<br> [ <a href="../index.htm">Main Index</a> | <a href="../xshix.htm">XSH</a> | <a href="../xcuix.htm">XCU</a> | <a href="../xbdix.htm">XBD</a> | <a href="../cursesix.htm">XCURSES</a> | <a href="../xnsix.htm">XNS</a> ]

</font></center><hr size=2 noshade>
</body></html>
