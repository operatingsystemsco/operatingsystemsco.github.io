<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<!-- Copyright 1997 The Open Group, All Rights Reserved -->
<title>sigprocmask</title>
</head><body bgcolor=white>
<center>
<font size=2>
The Single UNIX &reg; Specification, Version 2<br>
Copyright &copy; 1997 The Open Group

</font></center><hr size=2 noshade>
<h4><a name = "tag_000_008_693">&nbsp;</a>NAME</h4><blockquote>
sigprocmask, pthread_sigmask - examine and change blocked signals
</blockquote><h4><a name = "tag_000_008_694">&nbsp;</a>SYNOPSIS</h4><blockquote>
<pre><code>

#include &lt;<a href="signa248.htm">signal.h</a>&gt;

int sigprocmask(int <i>how</i>, const sigset_t *<i>set</i>, sigset_t *<i>oset</i>);
int pthread_sigmask(int <i>how</i>, const sigset_t *<i>set</i>, sigset_t *<i>oset</i>);
</code>
</pre>
</blockquote><h4><a name = "tag_000_008_695">&nbsp;</a>DESCRIPTION</h4><blockquote>
In a single-threaded process, the
<i>sigprocmask()</i>
function allows the calling process to examine or change (or both)
the signal mask of the calling thread.
<p>
If the argument
<i>set</i>
is not a null pointer, it points to a set of signals to be used
to change the currently blocked set.
<p>
The argument
<i>how</i>
indicates the way in which the set is changed, and consists of
one of the following values:
<dl compact>

<dt>SIG_BLOCK<dd>
The resulting set will be the union of the current set and the signal
set pointed to by <i>set</i>.

<dt>SIG_SETMASK<dd>
The resulting set will be the signal set pointed to by <i>set</i>.

<dt>SIG_UNBLOCK<dd>
The resulting set will be the intersection of the current
set and the complement of the signal set pointed to by <i>set</i>.

</dl>
<p>
If the argument
<i>oset</i>
is not a null pointer, the previous mask is stored in the location
pointed to by <i>oset</i>.
If <i>set</i> is a null pointer, the value of the
argument <i>how</i> is not significant and the process' signal
mask is unchanged; thus the call can be used to enquire about
currently blocked signals.
<p>
If there are any pending unblocked signals after the call to
<i>sigprocmask()</i>,
at least one of those signals will be delivered before the call to
<i>sigprocmask()</i>
returns.
<p>
It is not possible to block those signals which cannot be
ignored.
This is enforced by the system without causing an error to be indicated.
<p>
If any of the SIGFPE, SIGILL, SIGSEGV or SIGBUS
signals are generated
while they are blocked, the result is undefined, unless the
signal was generated by a function capable of sending a signal to a 
specific process or thread.
<p>
If
<i>sigprocmask()</i>
fails, the thread's signal mask is not changed.
<p>
The use of the
<i>sigprocmask()</i>
function is unspecified in a multi-threaded process.
<p>
The
<i><a href="pthre193.htm">pthread_sigmask()</a></i>
function is used to examine or change (or both)
the calling thread's signal mask,
regardless of the number of threads in the process.
The effect is the same as described for
<i>sigprocmask()</i>,
without the restriction that the call be made in a single-threaded
process.
</blockquote><h4><a name = "tag_000_008_696">&nbsp;</a>RETURN VALUE</h4><blockquote>
Upon successful completion,
<i>sigprocmask()</i>
returns 0.  Otherwise -1 is returned,
<i>errno</i>
is set to indicate the error and the process' signal mask will be unchanged.
<p>
Upon successful completion
<i><a href="pthre193.htm">pthread_sigmask()</a></i>
returns 0; otherwise it returns the corresponding error number.
</blockquote><h4><a name = "tag_000_008_697">&nbsp;</a>ERRORS</h4><blockquote>
The
<i>sigprocmask()</i>
and
<i><a href="pthre193.htm">pthread_sigmask()</a></i>
functions will fail if:
<dl compact>

<dt>[EINVAL]<dd>
The value of the <i>how</i> argument is not equal to one of the
defined values.

</dl>
<p>
The
<i><a href="pthre193.htm">pthread_sigmask()</a></i>
function will not return an error code of [EINTR].
</blockquote><h4><a name = "tag_000_008_698">&nbsp;</a>EXAMPLES</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_008_699">&nbsp;</a>APPLICATION USAGE</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_008_700">&nbsp;</a>FUTURE DIRECTIONS</h4><blockquote>
None.
</blockquote><h4><a name = "tag_000_008_701">&nbsp;</a>SEE ALSO</h4><blockquote>
<i><a href="sigac238.htm">sigaction()</a></i>,
<i><a href="sigad239.htm">sigaddset()</a></i>,
<i><a href="sigde241.htm">sigdelset()</a></i>,
<i><a href="sigem242.htm">sigemptyset()</a></i>,
<i><a href="sigfi243.htm">sigfillset()</a></i>,
<i><a href="sigis246.htm">sigismember()</a></i>,
<i><a href="sigpe249.htm">sigpending()</a></i>,
<i><a href="sigqueue.htm">sigqueue()</a></i>,
<i><a href="sigsu252.htm">sigsuspend()</a></i>,
<i><a href="signa248.htm">&lt;signal.h&gt;</a></i>.
</blockquote><h4>DERIVATION</h4><blockquote>
Derived from the POSIX.1-1988 standard.
</blockquote><hr size=2 noshade>
<center><font size=2>
UNIX &reg; is a registered Trademark of The Open Group.<br>
Copyright &copy; 1997 The Open Group
<br> [ <a href="../index.htm">Main Index</a> | <a href="../xshix.htm">XSH</a> | <a href="../xcuix.htm">XCU</a> | <a href="../xbdix.htm">XBD</a> | <a href="../cursesix.htm">XCURSES</a> | <a href="../xnsix.htm">XNS</a> ]

</font></center><hr size=2 noshade>
</body></html>

