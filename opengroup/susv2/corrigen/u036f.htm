<html>

<head>
<title>Corrigendum</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body bgcolor="#FFFFFF">

<p><strong><font face="Arial"><big><big>Corrigendum: U036<br>
</big></big><br>
<small>Date: 09/98<br>
<br>
Document: C610<br>
X/Open Curses, Issue 4, Version 2<br>
<br>
Code: 10421 09/98 C610/U036<br>
<br>
Contents: This corrigendum incorporates:<br>
U022 (May 1997)<br>
U018 (February 1997)<br>
</font></strong><br>
</small>----------------------------------------------------------------------------<br>
<br>
Change Number: U036/1<br>
<br>
On Page 11 add new text as follows:<br>
<br>
2.3.2 Thread Safety<br>
<br>
The interfaces defined by this document need not be thread-safe.<br>
<br>
----------------------------------------------------------------------------<br>
----------------------------------------------------------------------------<br>
<br>
Start of Corrigendum U022 (May 1997).<br>
<br>
----------------------------------------------------------------------------<br>
<br>
Change Number: U022/1<br>
<br>
On the &lt;curses.h&gt; manual page, shade the addchnstr() prototype as an EC<br>
extension and unshade the addchstr() prototype.<br>
<br>
----------------------------------------------------------------------------<br>
<br>
Change Number: U022/2<br>
<br>
On the border() manual page, change the macros ACS_BLCORNER and<br>
ACS_BRCORNER to ACS_LLCORNER and ACS_LRCORNER respectively.<br>
<br>
----------------------------------------------------------------------------<br>
----------------------------------------------------------------------------<br>
<br>
Start of Corrigendum U018 (February 1997).<br>
<br>
Note: X/Open Curses, Issue 4, Version 2 can exist in either or both<br>
of the following environments:<br>
<br>
- System Interfaces and Headers, Issue 4, Version 2<br>
- System Interfaces and Headers, Issue 5<br>
<br>
The Base Environment section of each change denotes the environment<br>
to which the change is applicable.<br>
<br>
----------------------------------------------------------------------------<br>
<br>
Change Number: U018/1<br>
<br>
On the getn_wstr() manual page (Page 96), replace the prototypes for<br>
getn_wstr() and get_wstr() with:<br>
<br>
int getn_wstr(wint_t *wstr, int n);<br>
int get_wstr(wint_t *wstr);<br>
<br>
Base Environment:<br>
System Interfaces and Headers, Issue 4, Version 2<br>
System Interfaces and Headers, Issue 5<br>
<br>
-------------------------------------------------------------------------<br>
<br>
Change Number: U018/2<br>
<br>
On environments supporting System Interfaces and Headers, Issue 5 replace<br>
Section 2.2 with the following text:<br>
<br>
2.2 The Compilation Environment<br>
<br>
Applications should ensure that the feature test macro<br>
_XOPEN_SOURCE is defined before inclusion of any<br>
header. This is needed to enable the functionality<br>
described in this document, and possibly to enable<br>
functionality defined elsewhere in the Common<br>
Applications Environment.<br>
<br>
The _XOPEN_SOURCE macro may be defined automatically<br>
by the compilation process, but to ensure maximum<br>
portability, applications should make sure that<br>
_XOPEN_SOURCE is defined by using either compiler<br>
options or #define directives in the source files,<br>
before any #include directives. Identifiers in this<br>
document may only be undefined using the #undef<br>
directive as described in Chapter 2 on page 11 or<br>
Section 2.2.1 on page 14. These #undef directives<br>
must follow all #include directives of any XSI<br>
headers.<br>
<br>
Most strictly conforming POSIX and ISO C applications<br>
will compile on systems conformant with this<br>
specification. However, an application which uses any<br>
of the items marked as an extension to POSIX and ISO<br>
C, for any purpose other than that shown here, may not<br>
compile. In such cases, it may be necessary to alter<br>
those applications to use alternative identifiers.<br>
<br>
Since this document is aligned with the ISO C<br>
standard, and since all functionality enabled by<br>
_POSIX_C_SOURCE set greater than zero and less than or<br>
equal to 199506L should be enabled by _XOPEN_SOURCE,<br>
there should be no need to define either _POSIX_SOURCE<br>
or _POSIX_C_SOURCE if _XOPEN_SOURCE is defined. Therefore,<br>
if _XOPEN_SOURCE is defined and _POSIX_SOURCE is defined, or<br>
_POSIX_C_SOURCE is set greater than zero and less than or<br>
equal to 199506L, the behaviour is the same as if only<br>
_XOPEN_SOURCE is defined. However, should _POSIX_C_SOURCE be<br>
set to a value greater than 199506L, the behaviour is undefined.<br>
<br>
The c89 and cc utilities recognise the additional -l<br>
operand for standard libraries:<br>
<br>
-l curses This operand makes visible all library<br>
functions referenced in this<br>
specification (except for those labelled<br>
ENHANCED CURSES and except for portions<br>
marked with the EC margin legend).<br>
<br>
[EC] If the implementation defines<br>
_XOPEN_CURSES and if the application<br>
defines the _XOPEN_SOURCE feature<br>
test macro with the value 500 before including<br>
any header, then -l curses also makes<br>
visible all library functions referenced<br>
in this specification and labelled<br>
ENHANCED CURSES and portions marked with<br>
the EC margin legend. [END EC]<br>
<br>
It is unspecified whether the library libcurses.a<br>
exists as a regular file.<br>
<br>
[EC] An application that uses any API specified as ENHANCED<br>
CURSES or relies on any portion of this specification<br>
marked with the EC margin legend must define<br>
_XOPEN_SOURCE = 500 in each source file or as |<br>
part of its compilation environment. [END EC]<br>
<br>
If the implementation supports the utilities marked<br>
DEVELOPMENT in the XCU specification, the lint utility<br>
recognises the additional -l curses operand for<br>
standard libraries:<br>
<br>
-l curses Names the library llib-lcurses.ln, which<br>
will contain functions specified in this<br>
document.<br>
<br>
It is unspecified whether the library llib-lcurses.ln<br>
exists as a regular file.<br>
<br>
Base Environment:<br>
System Interfaces and Headers, Issue 5<br>
<br>
-------------------------------------------------------------------------<br>
<br>
Change Number: U018/3<br>
<br>
On environments supporting System Interfaces and Headers, Issue 5,<br>
change the following text within the &lt;curses.h&gt; manual page:<br>
<br>
From:<br>
<br>
These attribute flags need not be distinct [EC] except when<br>
_XOPEN_CURSES is defined and the application sets<br>
_XOPEN_SOURCE_EXTENDED to 1. [END EC]<br>
<br>
To:<br>
<br>
These attribute flags need not be distinct [EC] except when<br>
_XOPEN_CURSES is defined and the application sets<br>
_XOPEN_SOURCE=500. [END EC]<br>
<br>
Base Environment:<br>
System Interfaces and Headers, Issue 4, Version 2<br>
System Interfaces and Headers, Issue 5<br>
<br>
-------------------------------------------------------------------------<br>
<br>
Change Number: U018/4<br>
<br>
Replace the first three paragraphs of Section 3.2, Windows, with<br>
the following:<br>
<br>
The Curses functions permit manipulation of window objects which can be<br>
thought of as two-dimensional arrays of characters and their renditions<br>
representing all or part of a terminal's physical screen. Windows do not<br>
have to correspond to the entire screen. It is possible to create smaller<br>
windows and also to indicate that a window is only partially visible on<br>
the screen. It is possible to create windows larger than the terminal<br>
screen using pads. A default window called stdscr, which is the size of<br>
the terminal screen, is supplied. Others may be created with newterm().<br>
<br>
Data structures declared as WINDOW refer to windows (and to subwindows,<br>
derived windows, pads and subpads, as described elsewhere). These data<br>
structures are manipulated with functions described in Chapter 6.<br>
<br>
Among the most basic functions are move() and addch() which manipulate the<br>
default window stdscr, and refresh() which tells Curses to update the user's<br>
screen from stdscr. More general versions of these functions enable specific<br>
windows to be manipulated and refreshed.<br>
<br>
Replace the definition of a pad with the following:<br>
<br>
A pad is a specialised case of a window which can be bigger than the<br>
actual screen size and is not necessarily associated with a particular<br>
part of the screen. Pads should be used whenever a window larger than<br>
the terminal screen is required.<br>
<br>
Add a definition of a subpad as follows:<br>
<br>
Subpad<br>
<br>
A subpad is a specialised case of a window created within another pad.<br>
<br>
On Page 74 (newwin()), add the following to the end of the<br>
2nd paragraph of the DESCRIPTION:<br>
<br>
The size of a window cannot be greater than the physical size of<br>
the screen, or that defined using the environment variables LINES<br>
and COLUMNS. The behaviour of a window which extends outside the<br>
terminal screen is undefined.<br>
<br>
Add the following paragraph to APPLICATION USAGE:<br>
<br>
Pads should be used whenever a window larger than the terminal screen is<br>
required.<br>
<br>
On Page 150 (newpad()), replace the first two paragraphs of the<br>
DESCRIPTION with the following:<br>
<br>
The newpad() function creates a specialised window called a pad with nlines<br>
lines and ncols columns. A pad is like a window, except that it is not<br>
restricted by the screen size and is not necessarily associated with a<br>
particular part of the screen. Automatic refreshes of pads (e.g., from<br>
scrolling or echoing of input) do not occur.<br>
<br>
The subpad() function creates a specialised window within a pad (called the<br>
parent pad) called a subpad with nlines lines and ncols columns. Unlike<br>
subwin() which uses screen coordinates, the subpad is created at position<br>
(begin_y, begin_x) within the parent pad. Changes made to either the parent<br>
pad or the subpad affect the other. The subpad must fit totally within the<br>
parent pad.<br>
<br>
Delete the second sentence in APPLICATION USAGE.<br>
<br>
Add the following paragraph to APPLICATION USAGE:<br>
<br>
Pads should be used whenever a window larger than the terminal screen is<br>
required.<br>
<br>
Base Environment:<br>
System Interfaces and Headers, Issue 4, Version 2<br>
System Interfaces and Headers, Issue 5<br>
<br>
-------------------------------------------------------------------------<br>
<br>
Change Number: U018/5<br>
<br>
The prototypes for vwprintw(), vw_printw(), vwscanw() and<br>
vw_scanw() differ between the manual pages and the &lt;curses.h&gt; header page.<br>
<br>
The correct prototypes are as per the manual pages. The &lt;curses.h&gt;<br>
should be updated as follows:<br>
<br>
int vwprintw(WINDOW *, char *, va_list);<br>
int vw_printw(WINDOW *, char *, va_list);<br>
int vwscanw(WINDOW *, char *, va_list);<br>
int vw_scanw(WINDOW *, char *, va_list);<br>
<br>
Base Environment:<br>
System Interfaces and Headers, Issue 4, Version 2<br>
System Interfaces and Headers, Issue 5<br>
<br>
-------------------------------------------------------------------------<br>
<br>
<br>
<br>
</p>
</body>
</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
